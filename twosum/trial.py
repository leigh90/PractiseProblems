# # given a list of numbers find the product of two number that sum up to the number 3333
# # when you find these two numbers return the product of the two numbers
# # submit a single answer
# 1.parse into csv
# 2. convert data to python list
# 3. flatten the list 
# 4. convert all the items to integers 
# 5. loop over list to check which two numbers sum up to the target

mynumbers = [326, 1577, 901, 478, 1193, 691, 42, 292, 544, 499, 361, 460, 1612, 1302, 1825, 1227, 1522, 1768, 2007, 1996, 1756, 1246, 1146, 934, 1916, 947, 147, 930, 322, 1405, 981, 582, 1540, 1750, 1432, 181, 1805, 1433, 1998, 1150, 1766, 1685, 60, 802, 427, 1973, 1567, 979, 623, 1774, 448, 1556, 1702, 1533, 1325, 539, 1118, 1502, 1353, 1881, 520, 2009, 1551, 1827, 31, 1266, 610, 1661, 1901, 1025, 743, 1789, 240, 1809, 1823, 808, 1994, 603, 725, 1738, 409, 1457, 161, 863, 1040, 464, 1595, 1306, 1731, 1840, 107, 232, 213, 939, 873, 777, 1021, 892, 1389, 1166, 716, 56, 352, 421, 507, 1105, 738, 1729, 941, 1688, 609, 937, 1550, 35, 313, 24, 1045, 1598, 799, 1278, 1749, 1015, 1125, 920, 982, 1701, 200, 1411, 1726, 1103, 1545, 116, 1991, 923, 1175, 1538, 1686, 1897, 1058, 992, 1504, 1985, 1136, 1035, 492, 95, 242, 1444, 1384, 874, 1924, 1112, 759, 428, 1416, 1379, 79, 758, 156, 915, 121, 658, 666, 840, 97, 814, 1059, 169, 556, 723, 223, 1949, 1368, 1060, 798, 1563, 1460, 1911, 972, 1455, 1425, 700, 516, 1468, 1343, 1883, 560, 1902, 1256, 2006, 1337, 212, 984, 1055, 1048, 1715, 683, 1514, 1152, 1828, 1636, 1519, 112, 1330, 1282, 1151, 967, 995, 48, 142, 541, 1761, 1333, 1574, 325, 876, 1366, 347, 1293, 960, 1931, 1585, 1274, 1392, 1760, 856, 1508, 1011, 1625, 315, 1010, 1079, 27, 1450, 2005, 728, 1707, 703, 1899, 282, 1191, 1224, 1081, 1137, 673, 1900, 585, 1742, 1892, 1929, 1875, 999, 1206, 94, 445, 29, 1566, 902, 729, 884, 899, 312, 737, 1620, 1373, 1222, 389, 1199, 1893, 536, 681, 945, 1734, 987, 1783, 755, 561, 883, 1986, 109, 1512, 1723, 167, 1744, 73, 1626, 746, 961, 404, 860, 1423, 1903, 114, 736, 834, 889, 1619, 175, 719, 1920, 1397, 503, 742, 1062, 202, 303, 1478, 713, 1341, 1438, 1923, 576, 137, 1874, 1176, 1147, 228, 63, 355, 617, 146, 669, 1443, 261, 1413, 1913, 149, 437, 1564, 1870, 158, 1623, 1298, 1394, 1906, 398, 1241, 129, 1186, 510, 1380, 411, 301, 1890, 1546, 443, 144, 1477, 648, 1481, 1691, 250, 1880, 557, 1565, 1602, 342, 680, 1005, 1695, 1291, 23, 1226, 290, 1295, 1633, 1225, 494, 238, 1410, 311, 1795, 1495, 568, 974, 1461, 1482, 1429, 280, 470, 1335, 820, 630, 1090, 1882, 1648, 1396, 1758, 1987, 264, 1945, 1138, 849, 565, 328, 532, 317, 1908, 726, 323, 296, 1115, 1948, 1645, 1399, 1954, 1730, 1161, 405, 1304, 270, 1029, 195, 1451, 1810, 1663, 1247, 706, 597, 338, 1303, 374, 765, 1235, 745, 477, 1020, 1972, 784, 1747, 456, 468, 1415, 1969, 1046, 455, 698, 416, 221, 1236, 817, 644, 1004, 986, 1711, 1787, 1859, 273, 788, 150, 194, 438, 148, 1525, 594, 1868, 99, 587, 540, 1517, 1431, 569, 1955, 69, 1910, 1143, 1285, 1499, 953, 376, 1387, 1798, 1164, 1589, 826, 1871, 43, 1467, 100, 964, 1075, 665, 944, 1962, 735, 1007, 555, 165, 1847, 862, 210, 1418, 1741, 900, 871, 1280, 812, 211, 383, 1345, 978, 412, 1452, 1754, 401, 1821, 1250, 444, 479, 1163, 1202, 804, 217, 991, 269, 424, 776, 49, 1436, 1110, 1775, 828, 141, 640, 199, 344, 110, 1698, 1832, 1277, 1833, 1873, 767, 1131, 1349, 988, 896, 1773, 707, 747, 473, 1669, 1733, 687, 1606, 1332, 1265, 1479, 526, 1365, 429, 201, 1108, 204, 1940, 495, 911, 297, 1187, 1627, 1682, 498, 1524, 98, 756, 997, 1776, 733, 1462, 965, 1066, 62, 1542, 171, 117, 1294, 433]

target = 3333
partner_list = []


seen = {}
for i,num in enumerate(mynumbers):
    if target - num in seen:
        print([seen[target - num], i]) 
    elif num not in seen:
        seen[num] = i 



# summation_list = [[1, 20],
# [40, 46],
# [34, 68],
# [79, 86],
# [148, 171],
# [19, 190],
# [14, 226],
# [185, 233],
# [37, 245],
# [112, 274],
# [236, 285],
# [299, 324],
# [322, 343],
# [17, 354],
# [88, 355],
# [310, 369],
# [135, 371],
# [38, 380],
# [41, 385],
# [180, 397],
# [109, 403],
# [155, 405],
# [384, 413],
# [344, 445],
# [187, 460],
# [290, 464],
# [283, 473],
# [59, 502],
# [280, 505],
# [137, 518],
# [176, 531],
# [73, 562],
# [475, 568]] 

# for liste in summation_list:
# print(mynumbers[summation_list[0][0]])


# for num in mynumbers:
#     if target - num in seen:
#         print(seen[target - num]) 
#     elif num not in seen:
#         seen[num] = num


print(mynumbers[1] * mynumbers[20])
print(mynumbers[40] * mynumbers[46])
print(mynumbers[34] * mynumbers[68])
print(mynumbers[79] * mynumbers[86])
print(mynumbers[148] * mynumbers[171])
print(mynumbers[19] * mynumbers[190])
print(mynumbers[14] * mynumbers[226])
print(mynumbers[185] * mynumbers[233])
print(mynumbers[37] * mynumbers[245])
print(mynumbers[112] * mynumbers[274])
print(mynumbers[236] * mynumbers[285])
print(mynumbers[299] * mynumbers[324])
print(mynumbers[322] * mynumbers[343])
print(mynumbers[17] * mynumbers[354])
print(mynumbers[88] * mynumbers[355])
print(mynumbers[310] * mynumbers[369])
print(mynumbers[135] * mynumbers[371])
print(mynumbers[38] * mynumbers[380])
print(mynumbers[41] * mynumbers[385])
print(mynumbers[180] * mynumbers[397])
print(mynumbers[109] * mynumbers[403])
print(mynumbers[155] * mynumbers[405])
print(mynumbers[384] * mynumbers[413])
print(mynumbers[344] * mynumbers[445])
print(mynumbers[187] * mynumbers[460])
print(mynumbers[290] * mynumbers[464])
print(mynumbers[283] * mynumbers[473])
print(mynumbers[59] * mynumbers[502])
print(mynumbers[280] * mynumbers[505])
print(mynumbers[137] * mynumbers[518])
print(mynumbers[176] * mynumbers[531])
print(mynumbers[73] * mynumbers[562])
print(mynumbers[475] * mynumbers[568])



2769212
2767322
2722232
2772110
2697416
2668652
2752100
2730350
2722700
2763650
2775582
2712960
2727270
2766920
2773062
2711430
2760710
2667330
2776880
2718900
2776760
2694566
2730782
2762702
2721762
2717930
2771216
2731212
2753352
2724092
2734580
2756916
2735402























# l1 = ["eat","sleep","repeat",'torrid','worse']

# for ele in enumerate(l1):
#     print (ele)

# for count,ele in enumerate(l1,100):
#     print (count,ele)